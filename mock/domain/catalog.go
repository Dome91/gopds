// Code generated by MockGen. DO NOT EDIT.
// Source: catalog.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "gopds/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCatalogRepository is a mock of CatalogRepository interface.
type MockCatalogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogRepositoryMockRecorder
}

// MockCatalogRepositoryMockRecorder is the mock recorder for MockCatalogRepository.
type MockCatalogRepositoryMockRecorder struct {
	mock *MockCatalogRepository
}

// NewMockCatalogRepository creates a new mock instance.
func NewMockCatalogRepository(ctrl *gomock.Controller) *MockCatalogRepository {
	mock := &MockCatalogRepository{ctrl: ctrl}
	mock.recorder = &MockCatalogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCatalogRepository) EXPECT() *MockCatalogRepositoryMockRecorder {
	return m.recorder
}

// CountAllBooks mocks base method.
func (m *MockCatalogRepository) CountBooks() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBooks")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllBooks indicates an expected call of CountAllBooks.
func (mr *MockCatalogRepositoryMockRecorder) CountAllBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBooks", reflect.TypeOf((*MockCatalogRepository)(nil).CountBooks))
}

// CountByParentCatalogEntryID mocks base method.
func (m *MockCatalogRepository) CountByParentCatalogEntryID(parentCatalogEntryID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByParentCatalogEntryID", parentCatalogEntryID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByParentCatalogEntryID indicates an expected call of CountByParentCatalogEntryID.
func (mr *MockCatalogRepositoryMockRecorder) CountByParentCatalogEntryID(parentCatalogEntryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByParentCatalogEntryID", reflect.TypeOf((*MockCatalogRepository)(nil).CountByParentCatalogEntryID), parentCatalogEntryID)
}

// FindAllBooks mocks base method.
func (m *MockCatalogRepository) FindAllBooks() ([]domain.CatalogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBooks")
	ret0, _ := ret[0].([]domain.CatalogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBooks indicates an expected call of FindAllBooks.
func (mr *MockCatalogRepositoryMockRecorder) FindAllBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBooks", reflect.TypeOf((*MockCatalogRepository)(nil).FindAllBooks))
}

// FindAllBooksInPage mocks base method.
func (m *MockCatalogRepository) FindAllBooksInPage(page, pageSize int) ([]domain.CatalogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBooksInPage", page, pageSize)
	ret0, _ := ret[0].([]domain.CatalogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBooksInPage indicates an expected call of FindAllBooksInPage.
func (mr *MockCatalogRepositoryMockRecorder) FindAllBooksInPage(page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBooksInPage", reflect.TypeOf((*MockCatalogRepository)(nil).FindAllBooksInPage), page, pageSize)
}

// FindAllByParentCatalogEntryID mocks base method.
func (m *MockCatalogRepository) FindAllByParentCatalogEntryID(parentCatalogEntryID string) ([]domain.CatalogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByParentCatalogEntryID", parentCatalogEntryID)
	ret0, _ := ret[0].([]domain.CatalogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByParentCatalogEntryID indicates an expected call of FindAllByParentCatalogEntryID.
func (mr *MockCatalogRepositoryMockRecorder) FindAllByParentCatalogEntryID(parentCatalogEntryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByParentCatalogEntryID", reflect.TypeOf((*MockCatalogRepository)(nil).FindAllByParentCatalogEntryID), parentCatalogEntryID)
}

// FindAllByParentCatalogEntryIDInPage mocks base method.
func (m *MockCatalogRepository) FindAllByParentCatalogEntryIDInPage(parentCatalogEntryID string, page, pageSize int) ([]domain.CatalogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByParentCatalogEntryIDInPage", parentCatalogEntryID, page, pageSize)
	ret0, _ := ret[0].([]domain.CatalogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByParentCatalogEntryIDInPage indicates an expected call of FindAllByParentCatalogEntryIDInPage.
func (mr *MockCatalogRepositoryMockRecorder) FindAllByParentCatalogEntryIDInPage(parentCatalogEntryID, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByParentCatalogEntryIDInPage", reflect.TypeOf((*MockCatalogRepository)(nil).FindAllByParentCatalogEntryIDInPage), parentCatalogEntryID, page, pageSize)
}

// FindAllRootDirectories mocks base method.
func (m *MockCatalogRepository) FindAllRootDirectories() ([]domain.CatalogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRootDirectories")
	ret0, _ := ret[0].([]domain.CatalogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRootDirectories indicates an expected call of FindAllRootDirectories.
func (mr *MockCatalogRepositoryMockRecorder) FindAllRootDirectories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRootDirectories", reflect.TypeOf((*MockCatalogRepository)(nil).FindAllRootDirectories))
}

// FindByID mocks base method.
func (m *MockCatalogRepository) FindByID(id string) (domain.CatalogEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(domain.CatalogEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockCatalogRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCatalogRepository)(nil).FindByID), id)
}

// Save mocks base method.
func (m *MockCatalogRepository) Save(catalog domain.Catalog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", catalog)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCatalogRepositoryMockRecorder) Save(catalog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCatalogRepository)(nil).Save), catalog)
}
